// <auto-generated />
using System;
using AppointmentBooking.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppointmentBooking.Migrations
{
    [DbContext(typeof(HospitalManagementDbContext))]
    [Migration("20250408101612_InitialDatabaseCreate")]
    partial class InitialDatabaseCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AppointmentBooking.Data.OpdviewTable", b =>
                {
                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("AgeType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("CaseTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Contactno")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CreatedByUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedDate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("District")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Dob")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DOB");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("FeeType")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FloorName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Opdqueue")
                        .HasColumnType("int")
                        .HasColumnName("OPDQueue");

                    b.Property<double?>("PaidAmt")
                        .HasColumnType("float");

                    b.Property<string>("PayType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("RefererName")
                        .HasColumnType("int");

                    b.Property<decimal?>("RegNo")
                        .HasColumnType("numeric(10,0)");

                    b.Property<string>("Religion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("RoomNo")
                        .HasColumnType("int");

                    b.Property<int>("SrNo")
                        .HasColumnType("int");

                    b.Property<decimal?>("Uhid")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("UHID");

                    b.ToView("OPDViewTable");
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblCaseType", b =>
                {
                    b.Property<int>("CaseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseTypeId"), 1L, 1);

                    b.Property<string>("CaseTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CaseTypeId");

                    b.ToTable("tblCaseType", (string)null);
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblCashReceipt", b =>
                {
                    b.Property<int>("ReceiptNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceiptNo"), 1L, 1);

                    b.Property<string>("CreatedByUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<int?>("Ipdno")
                        .HasColumnType("int")
                        .HasColumnName("IPDNo");

                    b.Property<int?>("Opdno")
                        .HasColumnType("int")
                        .HasColumnName("OPDNo");

                    b.Property<string>("PayType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double?>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<decimal?>("Uhid")
                        .HasColumnType("numeric(18,0)");

                    b.HasKey("ReceiptNo");

                    b.HasIndex("Opdno");

                    b.HasIndex("Uhid");

                    b.ToTable("tblCashReceipt", (string)null);
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblDepartment", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"), 1L, 1);

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FloorName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RoomNo")
                        .HasColumnType("int");

                    b.HasKey("DepartmentId");

                    b.ToTable("tblDepartments", (string)null);
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblDoctorFeeTypeSetup", b =>
                {
                    b.Property<int>("DocFeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocFeeId"), 1L, 1);

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<double?>("Fee")
                        .HasColumnType("float");

                    b.Property<int?>("FeeTypeId")
                        .HasColumnType("int");

                    b.HasKey("DocFeeId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("FeeTypeId");

                    b.ToTable("tblDoctorFeeTypeSetup", (string)null);
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblDoctorSetup", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"), 1L, 1);

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DoctorId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("tblDoctorSetup", (string)null);
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblDropDownItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ItemName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ItemValue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("tblDropDownItems", (string)null);
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblFeeType", b =>
                {
                    b.Property<int>("FeeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeeTypeId"), 1L, 1);

                    b.Property<string>("FeeTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FeeTypeId");

                    b.ToTable("tblFeeType", (string)null);
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblIpdbedStatus", b =>
                {
                    b.Property<int>("BedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BedId"), 1L, 1);

                    b.Property<string>("BedName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("BedTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("IpdregNo")
                        .HasColumnType("int")
                        .HasColumnName("IPDRegNo");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("BedId")
                        .HasName("PK_tblBedStatus");

                    b.HasIndex("BedTypeId");

                    b.ToTable("tblIPDBedStatus", (string)null);
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblIpdbedType", b =>
                {
                    b.Property<int>("BedTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BedTypeId"), 1L, 1);

                    b.Property<string>("BedTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.HasKey("BedTypeId")
                        .HasName("PK_tblBedType");

                    b.ToTable("tblIPDBedType", (string)null);
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblIpdexpenseEntry", b =>
                {
                    b.Property<int>("ExpenseEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExpenseEntryId"), 1L, 1);

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<int?>("IpdregNo")
                        .HasColumnType("int")
                        .HasColumnName("IPDRegNo");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TestGroup")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TestName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Uhid")
                        .HasColumnType("numeric(18,0)");

                    b.HasKey("ExpenseEntryId");

                    b.ToTable("tblIPDExpenseEntry", (string)null);
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblIpdregistration", b =>
                {
                    b.Property<int>("IpdregNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IPDRegNo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IpdregNo"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("AdmCharge")
                        .HasColumnType("float");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("AgeType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("BedNo")
                        .HasColumnType("int");

                    b.Property<int?>("BedType")
                        .HasColumnType("int");

                    b.Property<int?>("CaseType")
                        .HasColumnType("int");

                    b.Property<string>("Complain")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ConsultantDr")
                        .HasColumnType("int");

                    b.Property<string>("Contactno")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CreatedByUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Diagnosis")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("District")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Dob")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DOB");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gaddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("GAddress");

                    b.Property<string>("Gcontact")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("GContact");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("GName");

                    b.Property<string>("Grelation")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("GRelation");

                    b.Property<int?>("IsDischarged")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("OpdSrNo")
                        .HasColumnType("int");

                    b.Property<string>("PayType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("Uhid")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("UHID");

                    b.HasKey("IpdregNo");

                    b.HasIndex("Uhid");

                    b.ToTable("tblIPDRegistration", (string)null);
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblLabParameterSetup", b =>
                {
                    b.Property<int>("ParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParameterId"), 1L, 1);

                    b.Property<string>("Method")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParameterName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Range")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Unit")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ParameterId");

                    b.ToTable("tblLabParameterSetup", (string)null);
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblOpdbooking", b =>
                {
                    b.Property<int>("OpdbookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OPDBookingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OpdbookingId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("AgeType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("BookingDate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CaseType")
                        .HasColumnType("int");

                    b.Property<int?>("ConsultantDr")
                        .HasColumnType("int");

                    b.Property<string>("Contactno")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("CreatedTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Department")
                        .HasColumnType("int");

                    b.Property<string>("District")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Dob")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DOB");

                    b.Property<string>("Ethnicity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FloorName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InsuranceId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PayStatus")
                        .HasColumnType("int");

                    b.Property<int?>("RoomNo")
                        .HasColumnType("int");

                    b.Property<decimal?>("Uhid")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("UHID");

                    b.HasKey("OpdbookingId");

                    b.ToTable("tblOPDBookings", (string)null);
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblOpdregistration", b =>
                {
                    b.Property<int>("SrNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrNo"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("AgeType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<int?>("CaseType")
                        .HasColumnType("int");

                    b.Property<int?>("ConsultantDr")
                        .HasColumnType("int");

                    b.Property<string>("Contactno")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CreatedByUser")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("CreatedTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Department")
                        .HasColumnType("int");

                    b.Property<string>("District")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Dob")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DOB");

                    b.Property<string>("Ethnicity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("FeeType")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FloorName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Opdqueue")
                        .HasColumnType("int")
                        .HasColumnName("OPDQueue");

                    b.Property<string>("PayType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RefId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RoomNo")
                        .HasColumnType("int");

                    b.Property<decimal?>("Uhid")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("UHID");

                    b.HasKey("SrNo");

                    b.HasIndex("CaseType");

                    b.HasIndex("ConsultantDr");

                    b.HasIndex("Department");

                    b.HasIndex("Uhid");

                    b.ToTable("tblOPDRegistration", (string)null);
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblPatientFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FeedbackText")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PatientName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("Uhid")
                        .HasColumnType("decimal(18,0)");

                    b.HasKey("Id");

                    b.ToTable("tblPatientFeedback", (string)null);
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblPatientRegistration", b =>
                {
                    b.Property<decimal>("Uhid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("UHID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Uhid"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("AgeType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Contactno")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedByUser")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedTime")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("District")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Dob")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DOB");

                    b.Property<string>("Ethnicity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("IsDelete")
                        .HasColumnType("int")
                        .HasColumnName("isDelete");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Uhid");

                    b.ToTable("tblPatientRegistration", (string)null);
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblReceiptDetail", b =>
                {
                    b.Property<int>("DetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetailsId"), 1L, 1);

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiptNo")
                        .HasColumnType("int");

                    b.Property<string>("TestGroup")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TestName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("TestPrice")
                        .HasColumnType("float");

                    b.HasKey("DetailsId");

                    b.HasIndex("ReceiptNo");

                    b.ToTable("tblReceiptDetails", (string)null);
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblResultEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<int?>("LabNo")
                        .HasColumnType("int");

                    b.Property<string>("ParameterName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Range")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Result")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.Property<string>("TestName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Unit")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("tblResultEntry", (string)null);
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblSampleRegistration", b =>
                {
                    b.Property<int>("SrNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrNo"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<int?>("IsCollected")
                        .HasColumnType("int")
                        .HasColumnName("isCollected");

                    b.Property<int?>("LabNo")
                        .HasColumnType("int");

                    b.Property<int?>("RecordNo")
                        .HasColumnType("int");

                    b.Property<int?>("RecordType")
                        .HasColumnType("int");

                    b.Property<decimal?>("Uhid")
                        .HasColumnType("numeric(18,0)");

                    b.HasKey("SrNo");

                    b.ToTable("tblSampleRegistration", (string)null);
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblTestGroupSetup", b =>
                {
                    b.Property<int>("TestGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestGroupId"), 1L, 1);

                    b.Property<string>("TestGroupName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TestGroupId");

                    b.ToTable("tblTestGroupSetup", (string)null);
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblTestParameterMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ParamaterId")
                        .HasColumnType("int");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParamaterId");

                    b.HasIndex("TestId");

                    b.ToTable("tblTestParameterMapping", (string)null);
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblTestSetup", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestId"), 1L, 1);

                    b.Property<int?>("TestGroupId")
                        .HasColumnType("int");

                    b.Property<string>("TestName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("TestPrice")
                        .HasColumnType("float");

                    b.HasKey("TestId");

                    b.HasIndex("TestGroupId");

                    b.ToTable("tblTestSetup", (string)null);
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblTransactionStatus", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"), 1L, 1);

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<int?>("OpdbookingId")
                        .HasColumnType("int")
                        .HasColumnName("OPDBookingId");

                    b.Property<string>("RefId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TransactionId");

                    b.ToTable("tblTransactionStatus", (string)null);
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblUserAccount", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Department")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Shift")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("tblUserAccount", (string)null);
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblCashReceipt", b =>
                {
                    b.HasOne("AppointmentBooking.Data.TblOpdregistration", "OpdnoNavigation")
                        .WithMany("TblCashReceipts")
                        .HasForeignKey("Opdno")
                        .HasConstraintName("FK__tblCashRe__OPDNo__3587F3E0");

                    b.HasOne("AppointmentBooking.Data.TblPatientRegistration", "Uh")
                        .WithMany("TblCashReceipts")
                        .HasForeignKey("Uhid")
                        .HasConstraintName("FK__tblCashRec__Uhid__3493CFA7");

                    b.Navigation("OpdnoNavigation");

                    b.Navigation("Uh");
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblDoctorFeeTypeSetup", b =>
                {
                    b.HasOne("AppointmentBooking.Data.TblDoctorSetup", "Doctor")
                        .WithMany("TblDoctorFeeTypeSetups")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK__tblDoctor__Docto__123EB7A3");

                    b.HasOne("AppointmentBooking.Data.TblFeeType", "FeeType")
                        .WithMany("TblDoctorFeeTypeSetups")
                        .HasForeignKey("FeeTypeId")
                        .HasConstraintName("FK__tblDoctor__FeeTy__1332DBDC");

                    b.Navigation("Doctor");

                    b.Navigation("FeeType");
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblDoctorSetup", b =>
                {
                    b.HasOne("AppointmentBooking.Data.TblDepartment", "Department")
                        .WithMany("TblDoctorSetups")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK__tblDoctor__Depar__619B8048");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblIpdbedStatus", b =>
                {
                    b.HasOne("AppointmentBooking.Data.TblIpdbedType", "BedType")
                        .WithMany("TblIpdbedStatuses")
                        .HasForeignKey("BedTypeId")
                        .HasConstraintName("FK__tblBedSta__BedTy__40058253");

                    b.Navigation("BedType");
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblIpdregistration", b =>
                {
                    b.HasOne("AppointmentBooking.Data.TblPatientRegistration", "Uh")
                        .WithMany("TblIpdregistrations")
                        .HasForeignKey("Uhid")
                        .HasConstraintName("FK__tblIPDRegi__UHID__3B40CD36");

                    b.Navigation("Uh");
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblOpdregistration", b =>
                {
                    b.HasOne("AppointmentBooking.Data.TblCaseType", "CaseTypeNavigation")
                        .WithMany("TblOpdregistrations")
                        .HasForeignKey("CaseType")
                        .HasConstraintName("FK__tblOPDReg__CaseT__778AC167");

                    b.HasOne("AppointmentBooking.Data.TblDoctorSetup", "ConsultantDrNavigation")
                        .WithMany("TblOpdregistrations")
                        .HasForeignKey("ConsultantDr")
                        .HasConstraintName("FK__tblOPDReg__Consu__76969D2E");

                    b.HasOne("AppointmentBooking.Data.TblDepartment", "DepartmentNavigation")
                        .WithMany("TblOpdregistrations")
                        .HasForeignKey("Department")
                        .HasConstraintName("FK__tblOPDReg__Depar__75A278F5");

                    b.HasOne("AppointmentBooking.Data.TblPatientRegistration", "Uh")
                        .WithMany("TblOpdregistrations")
                        .HasForeignKey("Uhid")
                        .HasConstraintName("FK__tblOPDRegi__UHID__74AE54BC");

                    b.Navigation("CaseTypeNavigation");

                    b.Navigation("ConsultantDrNavigation");

                    b.Navigation("DepartmentNavigation");

                    b.Navigation("Uh");
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblReceiptDetail", b =>
                {
                    b.HasOne("AppointmentBooking.Data.TblCashReceipt", "ReceiptNoNavigation")
                        .WithMany("TblReceiptDetails")
                        .HasForeignKey("ReceiptNo")
                        .HasConstraintName("FK__tblReceip__Recei__3864608B");

                    b.Navigation("ReceiptNoNavigation");
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblTestParameterMapping", b =>
                {
                    b.HasOne("AppointmentBooking.Data.TblLabParameterSetup", "Paramater")
                        .WithMany("TblTestParameterMappings")
                        .HasForeignKey("ParamaterId")
                        .HasConstraintName("FK__tblTestPa__Param__57DD0BE4");

                    b.HasOne("AppointmentBooking.Data.TblTestSetup", "Test")
                        .WithMany("TblTestParameterMappings")
                        .HasForeignKey("TestId")
                        .HasConstraintName("FK__tblTestPa__TestI__56E8E7AB");

                    b.Navigation("Paramater");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblTestSetup", b =>
                {
                    b.HasOne("AppointmentBooking.Data.TblTestGroupSetup", "TestGroup")
                        .WithMany("TblTestSetups")
                        .HasForeignKey("TestGroupId")
                        .HasConstraintName("FK__tblTestSe__TestG__2A164134");

                    b.Navigation("TestGroup");
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblCaseType", b =>
                {
                    b.Navigation("TblOpdregistrations");
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblCashReceipt", b =>
                {
                    b.Navigation("TblReceiptDetails");
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblDepartment", b =>
                {
                    b.Navigation("TblDoctorSetups");

                    b.Navigation("TblOpdregistrations");
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblDoctorSetup", b =>
                {
                    b.Navigation("TblDoctorFeeTypeSetups");

                    b.Navigation("TblOpdregistrations");
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblFeeType", b =>
                {
                    b.Navigation("TblDoctorFeeTypeSetups");
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblIpdbedType", b =>
                {
                    b.Navigation("TblIpdbedStatuses");
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblLabParameterSetup", b =>
                {
                    b.Navigation("TblTestParameterMappings");
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblOpdregistration", b =>
                {
                    b.Navigation("TblCashReceipts");
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblPatientRegistration", b =>
                {
                    b.Navigation("TblCashReceipts");

                    b.Navigation("TblIpdregistrations");

                    b.Navigation("TblOpdregistrations");
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblTestGroupSetup", b =>
                {
                    b.Navigation("TblTestSetups");
                });

            modelBuilder.Entity("AppointmentBooking.Data.TblTestSetup", b =>
                {
                    b.Navigation("TblTestParameterMappings");
                });
#pragma warning restore 612, 618
        }
    }
}
